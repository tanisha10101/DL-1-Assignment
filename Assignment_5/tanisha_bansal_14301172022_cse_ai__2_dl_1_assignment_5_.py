# -*- coding: utf-8 -*-
"""TANISHA_BANSAL_14301172022_CSE-AI _2_DL_1_ASSIGNMENT_5_.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1z7WNVqLBOfAiO2U7xz-ezRHPDLZACicd

**Submitted by:-**

**NAME:- TANISHA BANSAL**

**BATCH:- CSE-AI - 2 (2026)**

**ROLL NO.:- 14301172022**

**COURSE:- DEEP LEARNING PRACTICALS - EXPERIMENT 5**

**AIM:- Write a program to implement simple convolutional neural network for image classification.**
"""

import tensorflow as tf
from tensorflow.keras import layers, models
import matplotlib.pyplot as plt

# Loading and preprocessing the MNIST dataset
def load_data():
    (x_train, y_train), (x_test, y_test) = tf.keras.datasets.mnist.load_data()
    # Normalizing pixel values to be between 0 and 1
    x_train = x_train.astype("float32") / 255.0
    x_test = x_test.astype("float32") / 255.0
    # Reshaping data to include channel dimension
    x_train = x_train[..., tf.newaxis]
    x_test = x_test[..., tf.newaxis]
    return x_train, y_train, x_test, y_test

# Defining a simple CNN model
def create_model():
    model = models.Sequential([
        layers.Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1)),
        layers.MaxPooling2D((2, 2)),
        layers.Conv2D(64, (3, 3), activation='relu'),
        layers.MaxPooling2D((2, 2)),
        layers.Flatten(),
        layers.Dense(64, activation='relu'),
        layers.Dense(10, activation='softmax')  # 10 classes for digits 0-9
    ])
    return model

# Compiling and training the model
def train_model(model, x_train, y_train, x_test, y_test):
    model.compile(optimizer='adam',
                  loss='sparse_categorical_crossentropy',
                  metrics=['accuracy'])
    history = model.fit(x_train, y_train, epochs=5,
                        validation_data=(x_test, y_test), batch_size=64)
    return history

# Ploting training results
def plot_training(history):
    plt.plot(history.history['accuracy'], label='Accuracy')
    plt.plot(history.history['val_accuracy'], label='Validation Accuracy')
    plt.xlabel('Epochs')
    plt.ylabel('Accuracy')
    plt.legend()
    plt.show()

# This is the Main function
def main():
    x_train, y_train, x_test, y_test = load_data()
    model = create_model()
    model.summary()
    history = train_model(model, x_train, y_train, x_test, y_test)
    plot_training(history)

if __name__ == "__main__":
    main()