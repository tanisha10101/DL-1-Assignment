# -*- coding: utf-8 -*-
"""TANISHA_BANSAL_14301172022_CSE-AI _2_DL_1_ASSIGNMENT_8.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RZuUglPgl8wK-txhUhi7rTuIu5EUeydR

**Submitted by:-**

**NAME:- TANISHA BANSAL**

**BATCH:- CSE-AI - 2 (2026)**

**ROLL NO.:- 14301172022**

**COURSE:- DEEP LEARNING PRACTICALS - EXPERIMENT 8**

**AIM: Write a program to implement a Recurrent Neural Model for text classification problem.**
"""

pip install tensorflow

import numpy as np
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Embedding, SimpleRNN, Dense, Dropout, Bidirectional
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences
from tensorflow.keras.datasets import imdb

#Parameters
vocab_size = 10000
max_length = 200  # Increased max_length for better sequence learning
embedding_dim = 128
batch_size = 32
epochs = 10  # Increased epochs for better training
dropout_rate = 0.5

# Load IMDb dataset
(x_train, y_train), (x_test, y_test) = imdb.load_data(num_words=vocab_size)

# Pad sequences
x_train = pad_sequences(x_train, maxlen=max_length, padding='post', truncating='post')
x_test = pad_sequences(x_test, maxlen=max_length, padding='post', truncating='post')

# Define an improved RNN model
def create_improved_rnn_model():
    model = Sequential([
        Embedding(input_dim=vocab_size, output_dim=embedding_dim, input_length=max_length),
        Bidirectional(SimpleRNN(128, return_sequences=False)),  # Bidirectional RNN
        Dropout(dropout_rate),
        Dense(64, activation='relu'),  # Additional Dense layer
        Dropout(dropout_rate),
        Dense(1, activation='sigmoid')  # Binary classification
    ])
    model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=0.001),
                  loss='binary_crossentropy',
                  metrics=['accuracy'])
    return model

# Create, train, and evaluate the improved RNN model
print("Training Improved RNN model...")
improved_rnn_model = create_improved_rnn_model()
improved_rnn_model.summary()
improved_rnn_model.fit(x_train, y_train, epochs=epochs, batch_size=batch_size, validation_split=0.2)

# Evaluate the model on the test set
improved_rnn_loss, improved_rnn_accuracy = improved_rnn_model.evaluate(x_test, y_test)
print(f"Improved RNN Test Loss: {improved_rnn_loss}, Test Accuracy: {improved_rnn_accuracy}")